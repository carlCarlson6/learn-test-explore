/**
 * Executable schema generated by Grats (https://grats.capt.dev)
 * Do not manually edit. Regenerate by running `npx grats`.
 */
import { findUserResolver as queryFindUserResolverResolver } from "./../../../users/findUserResolver";
import { myUserResolver as queryMyUserResolverResolver } from "./../../../users/myUserResolver";
import { loginUserResolver as mutationLoginUserResolverResolver } from "./../../../auth/loginUserResolver";
import { signUserResolver as mutationSignUserResolverResolver } from "./../../../auth/signUser";
import { GraphQLSchema, GraphQLObjectType, GraphQLNonNull, GraphQLString, GraphQLInputObjectType } from "graphql";
export function getSchema(): GraphQLSchema {
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                id: {
                    name: "id",
                    type: new GraphQLNonNull(GraphQLString)
                },
                name: {
                    name: "name",
                    type: new GraphQLNonNull(GraphQLString)
                }
            };
        }
    });
    const FindUserInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "FindUserInput",
        fields() {
            return {
                name: {
                    name: "name",
                    type: new GraphQLNonNull(GraphQLString)
                }
            };
        }
    });
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                findUser: {
                    name: "findUser",
                    type: UserType,
                    args: {
                        input: {
                            name: "input",
                            type: new GraphQLNonNull(FindUserInputType)
                        }
                    },
                    resolve(source, args, context) {
                        return queryFindUserResolverResolver(source, args, context);
                    }
                },
                myUser: {
                    name: "myUser",
                    type: new GraphQLNonNull(UserType),
                    resolve(source) {
                        return queryMyUserResolverResolver(source);
                    }
                }
            };
        }
    });
    const LoginUserResultType: GraphQLObjectType = new GraphQLObjectType({
        name: "LoginUserResult",
        fields() {
            return {
                authToken: {
                    name: "authToken",
                    type: new GraphQLNonNull(GraphQLString)
                },
                user: {
                    name: "user",
                    type: new GraphQLNonNull(UserType)
                }
            };
        }
    });
    const LoginUserInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "LoginUserInput",
        fields() {
            return {
                name: {
                    name: "name",
                    type: new GraphQLNonNull(GraphQLString)
                },
                password: {
                    name: "password",
                    type: new GraphQLNonNull(GraphQLString)
                }
            };
        }
    });
    const SignUserResultType: GraphQLObjectType = new GraphQLObjectType({
        name: "SignUserResult",
        fields() {
            return {
                authToken: {
                    name: "authToken",
                    type: new GraphQLNonNull(GraphQLString)
                },
                user: {
                    name: "user",
                    type: new GraphQLNonNull(UserType)
                }
            };
        }
    });
    const SignUserInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "SignUserInput",
        fields() {
            return {
                name: {
                    name: "name",
                    type: new GraphQLNonNull(GraphQLString)
                },
                password: {
                    name: "password",
                    type: new GraphQLNonNull(GraphQLString)
                }
            };
        }
    });
    const MutationType: GraphQLObjectType = new GraphQLObjectType({
        name: "Mutation",
        fields() {
            return {
                loginUser: {
                    name: "loginUser",
                    type: new GraphQLNonNull(LoginUserResultType),
                    args: {
                        input: {
                            name: "input",
                            type: new GraphQLNonNull(LoginUserInputType)
                        }
                    },
                    resolve(source, args) {
                        return mutationLoginUserResolverResolver(source, args);
                    }
                },
                signUser: {
                    name: "signUser",
                    type: new GraphQLNonNull(SignUserResultType),
                    args: {
                        input: {
                            name: "input",
                            type: new GraphQLNonNull(SignUserInputType)
                        }
                    },
                    resolve(source, args, context) {
                        return mutationSignUserResolverResolver(source, args, context);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        query: QueryType,
        mutation: MutationType,
        types: [FindUserInputType, LoginUserInputType, SignUserInputType, LoginUserResultType, MutationType, QueryType, SignUserResultType, UserType]
    });
}
